//网络的每一条边（vi，vj）除给定了容量Cij外，还给了一个单位流量费用Bij>=0，现要求计算网络模型中的最大流F，使流的总输送费用B（F）=ΣBF取极小值
//当我们沿着一条关于可行流F的可增广路径P，从调整量a=1出发，调整F，得到新的可行流，调整前后流的总输送费用增加多少
//设调整后流的总输送费用为B(F')，调整前流的总输送费用为B(F)，按照定义，调整前后的增加量应该为p路径中正向边输送费用的增加值减去反向边输送费用的增加值
//由于V(F')=V(F)+1,因此	B(F')-B(F)=Σ（p+）Bij-Σ（p-）Bij，称为这条可行路P中的费用
//显然，若F是流量为V(F)的所有可行流中费用最小者，而P是关于F的所有可增广路径中费用最小的可增广路径，那么沿着P去调整F，得到可行流F',即流量为V(F')的所有可改进流中的最小费用流，这样，当F是最大流时，它即所求的最小费用最大流。
//注意到，由于Bij>=0，故F=0必是流量为0的最小费用流，这样，总可以从F=0开始。一般的，设已知F是流量V(F)的最小费用流，余下的问题是如何去寻求关于F的最小费用可增广路径，为此构造一个赋权有向图W(F),它的节点是原网络D的节点，把D中的每一条边(vi,vj)变成两个方向相反的边（vi，vj）和（vj，vi），定义W（F）的边权Wij为
//正向边的权Wij=Bij Fij<Cij;Wij=∞ Fij=Cij
//反向边的权Wij=-Bij Fij>0；Wij=∞ Fij=0
//于是在网络中需寻找关于F的最小费用可增广路径，等价于在赋权有向图W（F）中寻求从vs到vt的最短路
//于是取F（0）=0，一般若在第k-1步得到最小费用流F（k-1），则构造赋权有向图W（F（k-1）），在W（F（k-1））中寻求从vs到vt的最短路径。若不存在最短路径，则F（k-1）即为最小费用最大流；若存在最短路径，则在原网络D中得到相应的增广路径p，在可增广路径p上对F（k-1）进行调整，可改进量为a=min{min{Cij-Fij（k-1），p+}，min{Fij（k-1），p-}}
//Fij(k)=Fij(k-1)+a,(i,j)属于p+；Fij(k)=Fij(k-1)-a,(i,j)属于p-；Fij(k)=Fij(k-1),(i,j)属于p-；Fij(k)=Fij(k-1),(i,j)属于P
//得到新的可行流F(k),再对F(k)重复上述步骤

#define E 50
#define V 100
struct edge {
	int x, y, next, c, b, op;//边为（i，j），流量为c，费用为b，x的下条出边的指针为next，后继边指针为op
};
edge a[E];
int tot, n, m, st, en;//边表长度为tot，源点为st，汇点为en，集装箱数为n
int fi[V], pre[V], d[V], h[V + 10];//v的当前出边序号fi[v];增广路上v的前驱为pre[v];源点至v的最短路长为d[v];队列为h
bool v[V];//节点i在队列的标志为v[i]=1

//1.构造网络流图的边表a
//（1）为了便于最短路径的计算，我们通过a[k].next将所有以x为头的有向弧连接起来，边表a中x的上一条出边序号为fi[x]
//（2）对于初始容量为c、费用为b的每条边（x，y）拆分成两条边插入边表a：一条是容量为c、费用为b的正向边；一条是容量为0，费用为-b的反向边（y，x）
//（3）为了按照流平衡的条件调整可增广路的流量，设置后继指针a[k].op:若为正向边，a[k].op=k+1;若为反向边，a[k].op=k-1。这样，当增广路的可调整量为a时，通过a[k].c-=a;a[a[k].op].c+=a,使流量保持平衡

//插边过程：
/*
void add(x, y, c, b)
{
	add(x, y, c, b, 1);
	add(y, x, 0, -b, -1);
}

void add(x, y, c, b, op)
{
	a[++tot].x = x;
	a[tot].y = y;
	a[tot].c = c;
	a[tot].b = b;
	a[tot].op = tot + op;
	a[tot].next = fi[x];
	fi[x] = tot;
}
*/

//2.使用spfa计算源点至汇点的增广路
//设队列为h，队首、队尾指针分别为l和r；v是节点在队列的标志；d为节点的最短路长估计值序列；pre为增广路上节点的前驱指针
/*
	int spfa(st,en,n)
	{
		memset(h,0,sizeof(h));
		memset(v,0,sizeof(v));
		memset(d,∞,sizeof(d));
		memset(pre,0,sizeof(pre));
		l=1,r=1;
		h[1]=st;
		v[st]=1;
		d[st]=0;
		while(1)
		{
			int x=h[l];
			for(int t=fi[x],y=a[t].y;t;t=a[t].next,y=a[t].y)
			{
				if(a[t].c>0&&d[y]>d[x]+a[t].b)
				{
					d[y]=d[x]+a[t].b;
					pre[y]=t;
					if(!v[y])
					{
						v[y]=1;
						r=r+1;h[r]=y;
					}
				}
			}
			if(l==r) break;
			v[x]=0;
			l=l+1;
		}
		return d[en];
	}

*/

//3.计算源点至汇点的增广路上新增的输送费用
//计算分两步：
//1.从汇点en出发，沿增广路上计算边的最小流量a
//2.从汇点en出发，调整增广路上各边的流量，将其费用计入输送费用ans
/*
	int aug(st,en,n)
	{
		int a=∞，ans=0,k=pre[en];
		while(k)
		{
			a=min(a,a[k].c);
			k=pre[a[k].x];
		}
		k=pre[en];
		while(k){
			ans+=a[k].b*a;
			a[k].c-=a;
			a[a[k].op].c+=a;
			k=pre[a[k].x];
		}
		return ans;
	}
*/


//4.计算最小费用最大流
//反复计算源点st至汇点en的增广路，每计算一次，则累计新增的输送费用，直至增广路不存在为止
/*
	int costflow(st,en,n)
	{
		int ans=0,temp=spfa(st,en,n);
		while(temp<∞){
			ans+=aug(st,en,n);
			temp=spfa(st,en,n);
		}
		return ans;
	}

*/

/*
	最小费用最大流算法最典型的应用是计算二分图的最佳匹配。方法如下：
	首先将带权二分图转换为相应的网络流图。
	对于二分图（x，y），构造一个网络流图D：
	1.源点为s，汇点为t
	2.对于i属于x，建立一条容量为1、费用为0的有向边（s，i）
	3.对于j属于y，建立一条容量为1、费用为0的有向边（j，t）
	4.对于E中的每一条边（i，j），建立一条容量为1、费用为0的有向边（i，j）
	容易看出，网络流图的最小费用最大流，恰好使X、Y中的节点两两匹配，对应于二分图的最佳匹配

*/