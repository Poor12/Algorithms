//设G（V,E）是一个简单有向图，在V中指定了两个节点，分别为源点和汇点，对于每一条弧（vi，vj）属于E，对应于一个实数cij>=0，称为弧的容量，通常我们把这样的简单有向图称为网络，G（V,E,C)
//S记为源点，T记为汇点，其余节点称为中间点
//所谓网络的可行流f，是指满足下述两个条件的流：
//1.流量限制：对于每条弧（u，v）属于E来说，弧流量为一个不大于弧容量的非负数
//2.流的平衡条件：对于每个中间点来说必须满足Σf（x，u）-Σf（u，x）=0，即除源点和汇点外的任意中间点u，流入u的流量和流出u的流量必须相同
//整个网络的流量V（f）指的是源点的净流出流量Σf（s，x）-Σf（x，s），或汇点的净流入流量Σf（x，t）-Σf（t，x）
//因此有了这样的问题：如何在网络中寻找最大流量和一个有最大流量的可行流方案
//最大流的核心是计算增广路。
//我们在保留以前工作的基础上“退流”，并重新分类出前向弧和后向弧，以便再次寻找可增大流量的路径
//若p是网络中连接源点s和汇点t的一条路，且路的方向是从s到t，则路上的弧有两种：
//1.前向弧：弧的方向与路的方向一致，前向弧的全体记为p+
//2.后向弧：弧的方向与路的方向相反，后向弧的全体记为p-
//设f是一个可行流，p是从s到t的一条路，若p满足下述两个条件：
//1.在p+的所有前向弧（u，v）上，0<=f(u,v)<C(u,v)
//2.在p-的所有后向弧（u，v）上，0<f(u,v)<=C(u,v)
//则p是关于f的一条增广路径
//划分前向弧和后向弧后，可以通过下述两个步骤增大路径p上的流量
//步骤一：求增广路上流量的可改进量a=min{前向弧的c（u，v）-f（u，v），后向弧的f（v，u）}
//步骤二：修改增广路p上每条弧（u，v）的流量
//f（u，v）=f（u，v）+a	（u，v）属于p+；f（u，v）=f（u，v）-a	（u，v）属于p-
//p之所以称为增广路，是因为p的前向弧均未饱和，每条前向弧的流量可增加a；p的后向弧倒流量可减少a；不属于p的弧的流量一概不变，这样可在保证每条弧的流量不超过容量上限，且保持流平衡的前提下使网络流量增加a，同时不影响p外其他弧的流量
//最大流定理：如果网络中找不到增广路径，则当前流为最大流；逆反命题也成立
//寻找最大流的三种算法：
//1.深度优先搜索dfs
//2.广度优先搜索bfs
//3.标号搜索pfs
//一般情况下，上述三种算法每次改进增广路径后通常仅增加一个流量，因此在最大流为a、寻找增广路的时间为m的情况下，计算最大流的时间复杂度为O（a*m）